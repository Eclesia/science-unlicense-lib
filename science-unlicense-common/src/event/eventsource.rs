//
// Public Domain - unlicense.science
//

use std::any::TypeId;

use crate::event::EventListener;

///
/// Whenever an object needs to send notifications to others it should implement
/// the EventSource class, and send Event objects.
///
pub trait EventSource {
    
    ///
    /// List possible event messages generated by this source.
    ///
    /// @return Class[], never null, can be empty
    ///
    fn get_event_classes(&self) -> Vec<TypeId>;

    fn get_listeners(&self, predicate: &str) -> Vec<Box<dyn EventListener>>;

    ///
    /// Register a listener for the given type of event.
    ///
    /// @param predicate, wanted event filter, can be null.
    /// @param listener, listener to register, can not be null
    ///
    fn add_event_listener(&self, predicate: &str , listener: Box<dyn EventListener>);

    ///
    /// Unregister a listener for the given type of event.
    ///
    /// @param predicate, event filter, can be null.
    /// @param listener, listener to unregister
    ///
    fn remove_event_listener(&self, predicate: &str , listener: Box<dyn EventListener>);

}